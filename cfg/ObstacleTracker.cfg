#!/usr/bin/env python
PACKAGE = "obstacle_detector"
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add('active', bool_t, 0, 'Is this node active', True)
gen.add('copy_segments', bool_t, 0, 'Copy detected segments into tracked obstacles message', True)

gen.add('loop_rate', double_t, 0, 'The main loop rate in Hz', 100.0)
gen.add('tracting_duration', double_t, 0, 'The duration of obstacle tracking in the case of lack of incomming data (after this time from the last corresponding measurement the tracked obstacle will be removed from the list)', 2.0)
gen.add('min_correspondence_cost', double_t, 0, 'A threshold for correspondence test', 0.3)
gen.add('std_correspondence_dev', double_t, 0, '(experimental) Standard deviation of the position ellipse in the correspondence test', 0.15)
gen.add('process_variance', double_t, 0, 'Variance of obstacles position and radius (parameter of Kalman Filter)', 0.01)
gen.add('process_rate_variance', double_t, 0, 'Variance of rate of change of obstacles values (parameter of Kalman Filter)', 0.1)
gen.add('measurement_variance', double_t, 0, 'Variance of measured obstacles values (parameter of Kalman Filter)', 1.0)
gen.add('frame_id', str_t, 0, 'Name of the coordinate frame in which the obstacles are described', 'map')

exit(gen.generate(PACKAGE, "obstacle_detector", "ObstacleTracker"))
