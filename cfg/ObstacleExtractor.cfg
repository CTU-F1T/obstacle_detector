#!/usr/bin/env python
PACKAGE = "obstacle_detector"
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add('active', bool_t, 0, 'Is this node active', True)
gen.add('use_scan', bool_t, 0, 'Should use laser scans for extraction', True)
gen.add('use_pcl', bool_t, 0, 'Should use point cloud for extraction', False)
gen.add('use_split_and_merge', bool_t, 0, 'Choose whether to use Iterative End Point Fit (false) or Split And Merge (true) algorithm to detect segments', True)
gen.add('circles_from_visible', bool_t, 0, 'Detect circular obstacles only from fully visible (not occluded) segments', True)
gen.add('discard_converted_segments', bool_t, 0, 'Do not publish segments, from which the circles were spawned', False)
gen.add('transform_coordinates', bool_t, 0, 'Transform the coordinates of obstacles to a frame described with frame_id parameter', False)

gen.add('min_group_points', int_t, 0, 'Minimum number of points comprising a group to be further processed', 5)
gen.add('max_group_distance', double_t, 0, 'If the distance between two points is greater than this value, start a new group', 0.1)
gen.add('distance_proportion', double_t, 0, 'Enlarge the allowable distance between points proportionally to the range of point (use scan angle increment in radians)', 0.0174533)
gen.add('max_split_distance', double_t, 0, 'If a point in group lays further from a leading line than this value, split the group,', 0.2)
gen.add('max_merge_separation', double_t, 0, 'If distance between obstacles is smaller than this value, consider merging them', 0.2)
gen.add('max_merge_spread', double_t, 0, 'Merge two segments if all of their extreme points lay closer to the leading line than this value', 0.2)
gen.add('max_circle_radius', double_t, 0, 'If a circle would have greater radius than this value, skip it', 0.6)
gen.add('radius_enlargement', double_t, 0, 'Artificially enlarge the circles radius by this value', 0.3)

gen.add('min_x_limit' ,double_t, 0, '...', -10.0)
gen.add('max_x_limit', double_t, 0, '...', 10.0)
gen.add('min_y_limit', double_t, 0, '...', -10.0)
gen.add('max_y_limit', double_t, 0, '...', 10.0)

gen.add('frame_id', str_t, 0, 'Name of the coordinate frame used as origin for produced obstacles (used only if transform_coordinates flag is set to true)', 'map')

exit(gen.generate(PACKAGE, "obstacle_detector", "ObstacleExtractor"))
