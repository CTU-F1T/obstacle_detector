#!/usr/bin/env python
PACKAGE = "obstacle_detector"
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add('active', bool_t, 0, 'Is this node active', True)
gen.add('use_scan', bool_t, 0, 'Should use laser scans for extraction', True)
gen.add('use_pcl', bool_t, 0, 'Should use point cloud for extraction', False)
gen.add('use_split_and_merge', bool_t, 0, 'Should use split + merge algorithm', True)
gen.add('circles_from_visible', bool_t, 0, '...', True)
gen.add('discart_converted_segments', bool_t, 0, '...', False)
gen.add('transform_coordinates', bool_t, 0, '...', False)

gen.add('min_group_points', int_t, 0, 'Minimum points to form group', 5)
gen.add('max_group_distance', double_t, 0, 'Maximal distance between points', 0.1)
gen.add('distance_proportion', double_t, 0, '...', 0.0174533)
gen.add('max_split_distance', double_t, 0, '...', 0.2)
gen.add('max_merge_separation', double_t, 0, '...', 0.2)
gen.add('max_merge_spread', double_t, 0, '...', 0.2)
gen.add('max_circle_radius', double_t, 0, '...', 0.6)
gen.add('radius_enlargement', double_t, 0, '...', 0.3)

gen.add('min_x_limit' ,double_t, 0, '...', -10.0)
gen.add('max_x_limit', double_t, 0, '...', 10.0)
gen.add('min_y_limit', double_t, 0, '...', -10.0)
gen.add('max_y_limit', double_t, 0, '...', 10.0)

gen.add('frame_id', str_t, 0, '...', 'map')

exit(gen.generate(PACKAGE, "obstacle_detector", "ObstacleExtractor"))
